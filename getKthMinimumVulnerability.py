import heapq

def findKthMinimumVulnerability(nums, m, k):
    if len(nums) < m:
        return []
    
    result = []
    min_heap = []  # Min-heap to store the larger half
    max_heap = []  # Max-heap to store the smaller half (inverted values)
    
    def add_num(num):
        if len(max_heap) < k:
            heapq.heappush(max_heap, -num)
        else:
            if num > -max_heap[0]:
                heapq.heappush(min_heap, num)
            else:
                heapq.heappush(max_heap, -num)
                heapq.heappush(min_heap, -heapq.heappop(max_heap))
    
    def remove_num(num):
        if num > -max_heap[0]:
            min_heap.remove(num)
            heapq.heapify(min_heap)
        else:
            max_heap.remove(-num)
            heapq.heapify(max_heap)
            if len(min_heap) > 0:
                heapq.heappush(max_heap, -heapq.heappop(min_heap))
    
    for i in range(m):
        add_num(nums[i])
    
    result.append(-max_heap[0])
    
    for i in range(m, len(nums)):
        remove_num(nums[i - m])
        add_num(nums[i])
        result.append(-max_heap[0])
    
    return result

k = 1
m = 1
vulnerability = [1, 3, 2, 5]

result = findKthMinimumVulnerability( vulnerability, m, k)

print(f"Result: {result}")